{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "project-synapse-workspace-instance"
		},
		"project-synapse-workspace-instance-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'project-synapse-workspace-instance-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:project-synapse-workspace-instance.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"projectDataLakeStorageAccount1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'projectDataLakeStorageAccount1'"
		},
		"projectSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'projectSqlDatabase1'"
		},
		"project-synapse-workspace-instance-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://projectsynapsedatalake.dfs.core.windows.net"
		},
		"projectDataLakeStorageAccount1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://airbnbdatastorage.dfs.core.windows.net/"
		},
		"projectSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "project-sql-server.database.windows.net"
		},
		"projectSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "project-sql-database"
		},
		"projectSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sql-server-admin"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/FintechDataMigration')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "GetTableListFromSqlDatabase",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \n    TABLE_SCHEMA AS SchemaName,\n    TABLE_NAME AS TableName\nFROM \n    INFORMATION_SCHEMA.TABLES\nWHERE \n    TABLE_TYPE = 'BASE TABLE' and TABLE_SCHEMA = 'fintech'\nORDER BY \n    SchemaName, TableName;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Database_project_SqlDatabase1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CopyEachTableToBronzeLayer",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetTableListFromSqlDatabase",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetTableListFromSqlDatabase').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "CopyTableToBronzeLayer",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@{concat('SELECT * FROM ', item().schemaName, '.', item().tableName)}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Database_project_SqlDatabase1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "BronzeLayer_projectDataLakeStorageAccount1",
											"type": "DatasetReference",
											"parameters": {
												"tableName": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"schemaName": {
													"value": "@item().SchemaName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "BronzeToSilver_ETL",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "CopyEachTableToBronzeLayer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "BronzeToSilver_ETL",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "sparkpool1",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Database_project_SqlDatabase1')]",
				"[concat(variables('workspaceId'), '/notebooks/BronzeToSilver_ETL')]",
				"[concat(variables('workspaceId'), '/bigDataPools/sparkpool1')]",
				"[concat(variables('workspaceId'), '/datasets/BronzeLayer_projectDataLakeStorageAccount1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BronzeLayer_projectDataLakeStorageAccount1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "projectDataLakeStorageAccount1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tableName": {
						"type": "string"
					},
					"schemaName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@{concat(dataset().tableName, '.parquet')}",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@{concat('bronze/', dataset().schemaName, '/', dataset().tableName)}",
							"type": "Expression"
						},
						"fileSystem": "fintech"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/projectDataLakeStorageAccount1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Database_project_SqlDatabase1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "projectSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/projectSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/project-synapse-workspace-instance-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('project-synapse-workspace-instance-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/project-synapse-workspace-instance-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('project-synapse-workspace-instance-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/projectDataLakeStorageAccount1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('projectDataLakeStorageAccount1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('projectDataLakeStorageAccount1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/projectSqlDatabase1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('projectSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('projectSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('projectSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('projectSqlDatabase1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/projectsqlpool_ad_hoc')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "select * from airbnb.customer_dim;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "projectsqlpool",
						"poolName": "projectsqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/projectsqlpool_create_schema')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create schema airbnb;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "projectsqlpool",
						"poolName": "projectsqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/projectsqlpool_create_sp1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE PROCEDURE airbnb.BookingAggregation\nAS\nBEGIN\n    TRUNCATE TABLE airbnb.BookingCustomerAggregation;\n\n    INSERT INTO airbnb.BookingCustomerAggregation\n    SELECT \n        c.country,\n        COUNT_BIG(*) AS total_bookings,\n        SUM(ISNULL(b.amount, 0)) AS total_amount,\n        MAX(b.booking_date) AS last_booking_date\n    FROM \n        airbnb.bookings_fact b\n    JOIN \n        airbnb.customer_dim c ON b.customer_id = c.customer_id\n    GROUP BY \n        c.country;\nEND;\n\nEXEC [airbnb].[BookingAggregation];\n\nSELECT * FROM airbnb.BookingCustomerAggregation;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "projectsqlpool",
						"poolName": "projectsqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/projectsqlpool_create_table1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE airbnb.customer_dim (\n    customer_id INT, \n    first_name NVARCHAR(100),\n    last_name NVARCHAR(100),\n    email NVARCHAR(255),\n    phone_number NVARCHAR(50),\n    address NVARCHAR(255),\n    city NVARCHAR(100),\n    state NVARCHAR(100),\n    country NVARCHAR(100),\n    zip_code NVARCHAR(20),\n    signup_date DATE,\n    last_login DATETIME,\n    total_bookings INT,\n    total_spent DECIMAL(10, 2),\n    preferred_language NVARCHAR(50),\n    referral_code NVARCHAR(50),\n    account_status NVARCHAR(50)\n);\n\nSELECT * FROM airbnb.customer_dim;\n\nSELECT TOP 10 * FROM airbnb.customer_dim ORDER BY customer_id;\n\nTRUNCATE TABLE airbnb.customer_dim;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "projectsqlpool",
						"poolName": "projectsqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/projectsqlpool_create_table2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE airbnb.bookings_fact (\n    booking_id NVARCHAR(100),\n    property_id NVARCHAR(100),\n    customer_id INT,\n    owner_id NVARCHAR(100),\n    check_in_date DATE,\n    check_out_date DATE,\n    booking_date DATETIME,\n    amount FLOAT,\n    currency NVARCHAR(10),\n    city NVARCHAR(100),\n    country NVARCHAR(100),\n    full_address NVARCHAR(255),\n    stay_duration BIGINT,\n    booking_year INT,\n    booking_month INT,\n    timestamp DATETIME\n);\n\nSELECT * FROM airbnb.bookings_fact;\n\nSELECT * FROM airbnb.bookings_fact WHERE booking_id = 'c1fc48f6-b35a-4910-858d-98803900ad53';\n\nDBCC FREEPROCCACHE;\n\nTRUNCATE TABLE airbnb.bookings_fact;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "projectsqlpool",
						"poolName": "projectsqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/projectsqlpool_create_table3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE airbnb.BookingCustomerAggregation\nWITH (DISTRIBUTION = ROUND_ROBIN)\nAS\nSELECT \n    c.country,\n    COUNT_BIG(*) AS total_bookings,\n    SUM(ISNULL(b.amount, 0)) AS total_amount,\n    MAX(b.booking_date) AS last_booking_date\nFROM \n    airbnb.bookings_fact b\nJOIN \n    airbnb.customer_dim c ON b.customer_id = c.customer_id\nGROUP BY \n    c.country;\n\nSELECT * FROM airbnb.BookingCustomerAggregation;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "projectsqlpool",
						"poolName": "projectsqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/projectsqlpool_create_user')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE USER [project-data-factory-instance] FROM EXTERNAL PROVIDER;\nEXEC sp_addrolemember 'db_datareader', 'project-data-factory-instance';\nEXEC sp_addrolemember 'db_datawriter', 'project-data-factory-instance';\nEXEC sp_addrolemember 'db_owner', 'project-data-factory-instance';\n\nGRANT SELECT, INSERT, UPDATE, DELETE, CONTROL ON SCHEMA::airbnb TO [project-data-factory-instance];\n\nSELECT \n    dp.name AS PrincipalName,\n    dp.type_desc AS PrincipalType,\n    p.permission_name AS PermissionName,\n    p.state_desc AS PermissionState\nFROM \n    sys.database_permissions p\nJOIN \n    sys.database_principals dp ON p.grantee_principal_id = dp.principal_id\nWHERE dp.name = 'project-data-factory-instance';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "projectsqlpool",
						"poolName": "projectsqlpool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BronzeToSilver_ETL')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4a5dd3c0-6599-4397-8785-a41445a48650"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"from pyspark.sql.functions import *"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Define paths\r\n",
							"base_path = \"abfss://fintech@airbnbdatagds.dfs.core.windows.net/bronze/fintech/\"\r\n",
							"output_base_path = \"abfss://fintech@airbnbdatagds.dfs.core.windows.net/silver/fintech/\"\r\n",
							"\r\n",
							"spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"'''\r\n",
							"Transformation for Accounts dataset\r\n",
							"A new column, \"AccountAgeYears\", is added, which calculates how long each account has been active \r\n",
							"by determining the difference between the current date and the account's open date, then converting it to years.\r\n",
							"'''\r\n",
							"def transform_accounts():\r\n",
							"    df = spark.read.parquet(f\"{base_path}Accounts/Accounts.parquet\")\r\n",
							"    # Example transformation: Calculate account age in years\r\n",
							"    df_transformed = df.withColumn(\"AccountAgeYears\", \r\n",
							"                                   round(datediff(current_date(), col(\"OpenDate\")) / 365.25, 2))\r\n",
							"    df_transformed.write.format(\"delta\").mode(\"overwrite\").save(f\"{output_base_path}Accounts/\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Transformation for Customers dataset\r\n",
							"def transform_customers():\r\n",
							"    df = spark.read.parquet(f\"{base_path}Customers/Customers.parquet\")\r\n",
							"    # Example transformation: Create a full name column and mask the email address\r\n",
							"    df_transformed = df.withColumn(\"FullName\", concat_ws(\" \", col(\"FirstName\"), col(\"LastName\"))) \\\r\n",
							"                       .withColumn(\"MaskedEmail\", \r\n",
							"                                   concat(lit(\"***@\"), substring_index(col(\"Email\"), \"@\", -1)))\r\n",
							"    df_transformed.write.format(\"delta\").mode(\"overwrite\").save(f\"{output_base_path}Customers/\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Transformation for Loans dataset with explicit casting\r\n",
							"def transform_loans():\r\n",
							"    df = spark.read.parquet(f\"{base_path}Loans/Loans.parquet\")\r\n",
							"    # Example transformation: Calculate total interest with explicit casting to match the Delta table\r\n",
							"    df_transformed = df.withColumn(\"TotalInterest\", \r\n",
							"                                   (col(\"LoanAmount\") * col(\"InterestRate\") / 100).cast(\"decimal(28,8)\")) \\\r\n",
							"                       .withColumn(\"LoanDurationYears\", \r\n",
							"                                   round(datediff(col(\"LoanEndDate\"), col(\"LoanStartDate\")) / 365.25, 2))\r\n",
							"    df_transformed.write.format(\"delta\").mode(\"overwrite\").save(f\"{output_base_path}Loans/\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Transformation for Payments dataset\r\n",
							"def transform_payments():\r\n",
							"    df = spark.read.parquet(f\"{base_path}Payments/Payments.parquet\")\r\n",
							"    # Example transformation: Calculate days since last payment\r\n",
							"    df_transformed = df.withColumn(\"DaysSinceLastPayment\", \r\n",
							"                                   datediff(current_date(), col(\"PaymentDate\")))\r\n",
							"    df_transformed.write.format(\"delta\").mode(\"overwrite\").save(f\"{output_base_path}Payments/\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Transformation for Transactions dataset\r\n",
							"def transform_transactions():\r\n",
							"    df = spark.read.parquet(f\"{base_path}Transactions/Transactions.parquet\")\r\n",
							"    # Example transformation: Categorize transaction types\r\n",
							"    df_transformed = df.withColumn(\"TransactionCategory\", \r\n",
							"                                   when(col(\"TransactionType\") == \"Deposit\", \"Income\")\r\n",
							"                                   .when(col(\"TransactionType\") == \"Withdrawal\", \"Expense\")\r\n",
							"                                   .otherwise(\"Other\"))\r\n",
							"    df_transformed.write.format(\"delta\").mode(\"overwrite\").save(f\"{output_base_path}Transactions/\")"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Process each table\r\n",
							"transform_accounts()\r\n",
							"transform_customers()\r\n",
							"transform_loans()\r\n",
							"transform_payments()\r\n",
							"transform_transactions()\r\n",
							"\r\n",
							"print(\"Bronze To Silver Completed !!\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sparkpool1')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 5
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "centralindia"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/projectsqlpool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "centralindia"
		}
	]
}